MODULE main
  VAR
    around:comp_around();
  --LTLSPEC
    --F(around.currentState=done);
    INVARSPEC
      around.currentState=done|around.currentState!=end;

MODULE simulate()
  /--VAR
    svphoto:{0,1};
    points:{1,2};
    validPoints:{1,2};
    validLines:{0,1};
    validSlots:{0,1};
    totalDetectTime:{29,30};
  ASSIGN
    init(svphoto):={0,1};
    init(points):={1,2};
    init(validPoints):={1,2};
    init(validLines):={0,1};
    init(validSlots):={0,1};
    init(totalDetectTime):={29,30};--/

  DEFINE
    viewPhotos:=1;
    points:=2;
    validPoints:=2;
    validLines:=1;
    validSlots:=1;
    totalDetectTime:=30;

MODULE comp_around()
	VAR
		currentState:{start,done,end,
			waiting,waiting_f,

			generateSurroundView,generateSurroundView_f,

			imagePathExaming,imagePathExaming_f,
			featureExtraction,featureExtraction_f,
			markingPointClassification,markingPointClassification_f,
			markingPointfinish,markingPointFinish_f,

			parkingLineCandidate,parkingLineCandidate_f,
			findPotentialLine,findPotentialLine_f,
			linePatternExaming,linePatternExaming_f,

			removeInvalidLine,removeInvalidLine_f,

			verifyParkingLine,verifyParkingLine_f,
			invalidLineDel,invalidLineDel_f,

			validSlot,validSlot_f,
			parkingSlotsInfo,parkingSlotsInfo_f};
		simulate:simulate();
		i:integer;

	ASSIGN
		init(currentState):=start;
		init(i):=0;

		next(i):=(currentState=end)?i:i+1;
		next(currentState):=
		case
			(currentState=start):{waiting,waiting_f};
			(currentState=waiting)&(simulate.viewPhotos=1):{generateSurroundView,generateSurroundView_f};
			(currentState=generateSurroundView):{imagePathExaming,imagePathExaming_f};
			(currentState=imagePathExaming):{featureExtraction,featureExtraction_f};
			(currentState=featureExtraction):{markingPointClassification,markingPointClassification_f};
			(currentState=markingPointClassification):{markingPointfinish,markingPointFinish_f};
			(currentState=markingPointfinish)&(simulate.validPoints>=2):{parkingLineCandidate,parkingLineCandidate_f};
			(currentState=parkingLineCandidate):{findPotentialLine,findPotentialLine_f};
			(currentState=findPotentialLine):{linePatternExaming,linePatternExaming_f};
			(currentState=linePatternExaming):{removeInvalidLine,removeInvalidLine_f};
			(currentState=removeInvalidLine)&(simulate.validLines>=1):{verifyParkingLine,verifyParkingLine_f};
			(currentState=verifyParkingLine):{validSlot,validSlot_f};
			(currentState=validSlot):{parkingSlotsInfo,parkingSlotsInfo_f};
			(currentState=parkingSlotsInfo)&(simulate.totalDetectTime<30):done;

			/--(currentState=waiting_f)|((currentState=waiting)&(simulate.svphoto!=1)):end;
			(currentState=MarkingPointDetection_f)|((currentState=MarkingPointDetection)&(simulate.points<2)):end;
			(currentState=ParkingLineCandidate_f)|((currentState=ParkingLineCandidate)&(simulate.validPoints<2)):end;
			(currentState=removeInvalidLine_f)|((currentState=removeInvalidLine)&(simulate.validLines<1)):end;
			(currentState=verifyParkingLine_f)|((currentState=verifyParkingLine)&(simulate.validSlots<1)):end;
			(currentState=getParkingSlot_f)|((currentState=getParkingSlot)&(simulate.totalDetectTime>=30)):end;
			TRUE:currentState;

			(currentState=MarkingPointDetection)&(simulate.points<2):done;
			(currentState=ParkingLineCandidate)&(simulate.validPoints<2):done;
			(currentState=removeInvalidLine)&(simulate.validLines<1):done;
			(currentState=verifyParkingLine)&(simulate.validSlots<1):done;
			(currentState=getParkingSlot)&(simulate.totalDetectTime>=30):done;--/
      TRUE:end;
		esac;
