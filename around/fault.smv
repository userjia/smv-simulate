MODULE main
  VAR
    around:comp_around();
  --LTLSPEC
    --F(around.currentState=done);
    INVARSPEC
      around.currentState=done|around.currentState!=end;

MODULE simulate()


  /--DEFINE
    viewPhotos:=1;
    points:=2;
    validPoints:=2;
    validLines:=1;
    validSlots:=1;
    totalDetectTime:=30;--/

MODULE comp_around()
	VAR
    viewPhotos:{0,1};
    points:{1,2};
    validPoints:{1,2};
    validLines:{0,1};
    validSlots:{0,1};
    totalDetectTime:{29,30};

    currentState:{start,done,end,
			waiting,waiting_f,

			generateSurroundView,generateSurroundView_f,

			imagePathExaming,imagePathExaming_f,
			featureExtraction,featureExtraction_f,
			markingPointClassification,markingPointClassification_f,
			markingPointfinish,markingPointFinish_f,

			parkingLineCandidate,parkingLineCandidate_f,
			findPotentialLine,findPotentialLine_f,
			linePatternExaming,linePatternExaming_f,

			removeInvalidLine,removeInvalidLine_f,

			verifyParkingLine,verifyParkingLine_f,
			invalidLineDel,invalidLineDel_f,

			validSlot,validSlot_f,
			parkingSlotsInfo,parkingSlotsInfo_f};
		simulate:simulate();
		i:integer;

  ASSIGN
		init(currentState):=start;
		init(i):=0;
		next(i):=(currentState=end)?i:i+1;

		next(currentState):=
		case
			(currentState=start):{waiting,waiting_f};
			(currentState=waiting)&(viewPhotos=1):{generateSurroundView,generateSurroundView_f};
			(currentState=generateSurroundView):{imagePathExaming,imagePathExaming_f};
			(currentState=imagePathExaming):{featureExtraction,featureExtraction_f};
			(currentState=featureExtraction):{markingPointClassification,markingPointClassification_f};
			(currentState=markingPointClassification):{markingPointfinish,markingPointFinish_f};
			(currentState=markingPointfinish)&(validPoints>=2):{parkingLineCandidate,parkingLineCandidate_f};
			(currentState=parkingLineCandidate):{findPotentialLine,findPotentialLine_f};
			(currentState=findPotentialLine):{linePatternExaming,linePatternExaming_f};
			(currentState=linePatternExaming):{removeInvalidLine,removeInvalidLine_f};
			(currentState=removeInvalidLine)&(validLines>=1):{verifyParkingLine,verifyParkingLine_f};
			(currentState=verifyParkingLine):{validSlot,validSlot_f};
			(currentState=validSlot):{parkingSlotsInfo,parkingSlotsInfo_f};
			(currentState=parkingSlotsInfo)&(totalDetectTime<30):done;
			TRUE:end;
		esac;
