--status:=[car_speed,car_angle,car_wheelAngle];
--ev:=[barrier,parallel,around,tar_x,tar_y,car_wheelAngle,car_speed];
--actuator:=[actuator_steerWheel.out,actuator_engine.out,actuator_brake.out,actuator_gear.out];
--can_in:=[sensor_speed.out,sensor_wheelAngle.out,sensor_GPS.out,sensor_campass.out];
--1 represent yes,have,is,right

--===================================main
MODULE main
	VAR
		si:Simulate(car);
		car:Car(ats.actuator);
		ats:ATS(si,car);

--===================================main-end

--===================================enviroment
MODULE Simulate(car)
	VAR
		x:{-1,0,1,2,3,4,5,6,7,8};
		y:{-1,0,1,2,3};
		car_angle:{-1,0,1,2,3,4,5,6,7,8};
		/--x:integer;
		y:integer;
		car_angle:integer;--/
	--INVARSPEC
		--ground_limit (x<=7)&(x>=0)&(y<=2)&(y>=0);
	DEFINE
		--a circle in x,y cordinary
		road:=[[0,0],[0,1],[0,2],[1,2],[2,2],[3,2],[4,2],[4,1],[4,0],[3,0],[2,0],[1,0]];
		carport:=[[1,1],[2,1],[3,1]];
		carport_car:=[1,1,0];
		cross:=[[0,0],[0,2],[4,2],[4,0]];
		
		--[1] how to represent?
		carport_type:={isLine};
		
		--barrier:=[[-1,-1]];
		barrier:=0;
		
		car_position:=[x,y];
	ASSIGN
		init(x):=0;
		init(y):=0;
		init(car_angle):=2;
		
		next(x):=
		case
			(car.car_speed=1)&(car_angle=0):x+1;
			(car.car_speed=1)&(car_angle=4):x+(-1);
			(car.car_speed=-1)&(car_angle=0):x+(-1);
			(car.car_speed=-1)&(car_angle=4):x+1;
			(car.car_speed!=0)&(car_angle=2)&(car.car_wheelAngle=1):x+1;
			(car.car_speed!=0)&(car_angle=6)&(car.car_wheelAngle=1):x+(-1);
			(car.car_speed!=0)&(car_angle=2)&(car.car_wheelAngle=-1):x+(-1);
			(car.car_speed!=0)&(car_angle=6)&(car.car_wheelAngle=-1):x+1;
			TRUE:x;
		esac;
		
		next(y):=
		case
			(car.car_speed=1)&(car_angle=2):y+1;
			(car.car_speed=1)&(car_angle=6):y+(-1);
			(car.car_speed=-1)&(car_angle=2):y+(-1);
			(car.car_speed=-1)&(car_angle=6):y+1;
			(car.car_speed!=0)&(car_angle=4)&(car.car_wheelAngle=1):y+1;
			(car.car_speed!=0)&(car_angle=0)&(car.car_wheelAngle=1):y+(-1);
			(car.car_speed!=0)&(car_angle=4)&(car.car_wheelAngle=-1):y+(-1);
			(car.car_speed!=0)&(car_angle=0)&(car.car_wheelAngle=-1):y+1;
			TRUE:y;
		esac;
		
		next(car_angle):=
		case
			(car.car_speed=1)&(car_angle=2)&(car.car_wheelAngle=1):0;
			(car.car_speed=1)&(car_angle=0)&(car.car_wheelAngle=1):6;
			(car.car_speed=1)&(car_angle=6)&(car.car_wheelAngle=1):4;
			(car.car_speed=1)&(car_angle=4)&(car.car_wheelAngle=1):2;
			(car.car_speed=1)&(car_angle=2)&(car.car_wheelAngle=-1):4;
			(car.car_speed=1)&(car_angle=0)&(car.car_wheelAngle=-1):2;
			(car.car_speed=1)&(car_angle=6)&(car.car_wheelAngle=-1):0;
			(car.car_speed=1)&(car_angle=4)&(car.car_wheelAngle=-1):6;
			TRUE:car_angle;
		esac;
		

MODULE Car(actuator)
	VAR
		car_speed:{-1,0,1};
		car_wheelAngle:{-1,0,1};
		car_brake:{0,1};
		car_gear:{-1,0,1};
	DEFINE
		--status:=[car_speed,car_wheelAngle];
	ASSIGN
		init(car_speed):=0;
		init(car_wheelAngle):=0;
		init(car_brake):=0;
		init(car_gear):=0;
		
		next(car_wheelAngle):=actuator.steerWheel;
		next(car_speed):=
		case
			car_brake=1:0;
			actuator.brake=1:0;
			TRUE:actuator.engine;
		esac;
		
		next(car_brake):=actuator.brake;
		next(car_gear):=actuator.gear;

MODULE CarIner(car,simulate)
	VAR
		--front or back
		sensor_speed:WheelSpeed(car.car_speed);
		sensor_wheelAngle:WheelAngle(car.car_wheelAngle);
		sensor_GPS:GPS(simulate.car_position);
		sensor_campass:Campass(simulate.car_angle);
	DEFINE
		car_speed:=sensor_speed.out;
		car_wheelAngle:=sensor_wheelAngle.out;
		car_position:=sensor_GPS.out;
		car_angle:=sensor_campass.out;

--===================================ats
MODULE ATS(simulate,car)
	VAR
		sensor_ultrasonic:Ultrasonic(simulate);
		sensor_around:AroundCamera(simulate);
		sensor_eye:DoubleEyeCamera(simulate);

		car_info:CarIner(car,simulate);
		can:CanBus(cpt_sys.can_out);
		cpt_sys:ComputeSystem(sensor_ultrasonic.out,sensor_around.around_ports,sensor_eye.out,car_info,simulate);
		ctl_sys:ControlSystem(can.out);
		actuator:ActuatorSystem(ctl_sys);

MODULE ActuatorSystem(ctl_sys)
	VAR
		actuator_steerWheel:SteerWheel(ctl_sys.steerWheel);
		actuator_engine:Engine(ctl_sys.engine);
		actuator_brake:Brake(ctl_sys.brake);
		actuator_gear:Gear(ctl_sys.gear);

	DEFINE
		steerWheel:=actuator_steerWheel.out;
		engine:=actuator_engine.out;
		brake:=actuator_brake.out;
		gear:=actuator_gear.out;
--===================================ats-end
--sensor
--===================================
MODULE Ultrasonic(simulate)
	DEFINE
		out:=simulate.barrier;

MODULE AroundCamera(simulate)
	DEFINE
		car_position:=simulate.car_position;
		x:=car_position[0];
		y:=car_position[1];
		around_ports:=[[x+1,y],[x+1,y+1],[x,y+1],[x+(-1),y+1],[x+(-1),y],[x+(-1),y+(-1)],[x,y+(-1)],[x+1,y+(-1)]];
		--around_ports:=[[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]];

MODULE DoubleEyeCamera(simulate)
	DEFINE
		car_position:=simulate.car_position;
		x:=car_position[0];
		y:=car_position[1];
		car_angle:=simulate.car_angle;
		out:=
		case
			car_angle=0:out0;
			car_angle=2:out2;
			car_angle=4:out4;
			car_angle=6:out6;
			TRUE:out;
		esac;
		
		out0:=[[x+1,y+1],[x+1,y],[x+1,y+(-1)]];
		out2:=[[x+(-1),y+1],[x,y+1],[x+1,y+1]];
		out4:=[[x+(-1),y+(-1)],[x+(-1),y],[x+(-1),y+1]];
		out6:=[[x+1,y+(-1)],[x,y+(-1)],[x+(-1),y+(-1)]];

MODULE WheelSpeed(input)
	DEFINE
		out:=input;

MODULE WheelAngle(input)
	DEFINE
		out:=input;

MODULE GPS(input)
	DEFINE
		out:=input;

MODULE Campass(input)
	DEFINE
		out:=input;
--===================================

--===================================
MODULE ComputeSystem(ultrasonic_signal,around_signal,eye_signal,can_in,simulate)
	VAR
		board_TX1:TX1(eye_signal,simulate);
		board_I2C:I2C(board_TX1.I2C_out);
		board_Rcar:Rcar(ultrasonic_signal,around_signal,board_I2C.out,can_in,simulate);
	DEFINE
		can_out:=board_Rcar.can_out;
--===================================

--===================================
MODULE ControlSystem(input)
	DEFINE
		out:=input;
		steerWheel:=input[1];
		engine:=input[0];
		brake:=input[3];
		gear:=input[2];

--===================================
--bus
--===================================
MODULE I2C(input)
	DEFINE
		out:=input;

MODULE CanBus(output)
	DEFINE
		out:=output;

--===================================
--===================================
MODULE Rcar(ultrasonic_signal,around_signal,I2C_input,can_in,simulate)
	VAR
		ultrasonic:comp_ultrasonic(ultrasonic_signal);
		--around detect algorithm
		around:comp_around(around_signal,simulate);
		
		plan:comp_plan(ultrasonic.out,around.out,I2C_input,can_in);
		plan_ctl:comp_ctl(plan.trace,plan.plan_stop,can_in);
		--I2C_input=eye_signal

	DEFINE
		can_out:=plan_ctl.control;
		/--can_out:=[cmd_angle,cmd_speed,cmd_brake,cmd_gear];
		cmd_speed:=plan_ctl.cmd_speed;
		--[3]
		cmd_angle:=plan_ctl.cmd_angle;
		cmd_gear:=plan_ctl.cmd_gear;
		cmd_brake:=plan_ctl.cmd_isStop;--/


MODULE TX1(input_signal,simulate)
	VAR
		target:comp_double(input_signal,simulate);

	DEFINE
		I2C_out:=target.out;
--===================================
--compute
--===================================
MODULE comp_plan(ultrasonic_info,around_valuePort,eye_info,can_in)
	VAR
		--port enviroment
		garage:{0,1};
		line:{0,1};
		gear:{-1,0,1};

		--if follow the road line
		followLine:{0,1};
		tinyAdjust:{-1,0,1};
		garage_type:{isLine,isGarage};

		--reckon
		stop:comp_stop(trace,ultrasonic_info,can_in);
		back_path:comp_back(around_valuePort,can_in);
		foward_path:comp_foward(eye_info,can_in);
		
	DEFINE
		--[3]the enviroment value form last version around_info
		around_info:=[1,isLine];
		--Ve:=can_in[0];
		trace:=
		case
			back_path.trace[1][0]!=-1:back_path.trace;
			foward_path.trace[1][0]!=-1:foward_path.trace;
			TRUE:foward_path.trace;
		esac;
		
		tar_pos:=back_path.plan_point;
		Xe:=tar_pos[0];
		Ye:=tar_pos[1];
		car_position:=can_in.car_position;
		X0:=car_position[0];
		Y0:=car_position[1];
		parallel:=around_info[0];
		plan_stop:=stop.isStop;
		--flag:=[gear,plan_stop,followLine,parallel,tinyAdjust];

		--compute the cmd to ctl;
	ASSIGN
		init(gear):=0;
		init(followLine):=0;
		init(tinyAdjust):=0;
		init(garage):=0;
		init(line):=0;

		next(garage):=
		case
			around_info[1]=isGarage:1;
			TRUE:garage;
		esac;

		next(line):=
		case
			around_info[1]=isLine:1;
			TRUE:line;
		esac;

		next(gear):=
		case
			ultrasonic_info=1:0;
			(Xe=X0)&(Ye=Y0):0;
			TRUE:gear;
		esac;


		next(followLine):=
		case
			(line!=0)&(garage!=0):1;
			TRUE:0;
		esac;

		next(tinyAdjust):=
		case
			(ultrasonic_info=1)|(parallel=0):1;
			TRUE:tinyAdjust;
		esac;

MODULE comp_ctl(trace,plan_stop,can_in)
	VAR
		PID1:runDis();
		angle:runAngle();
		curve:getCurve();
		PID2:cross();

		cmd_angle:{-1,0,1};
		cmd_gear:{-1,0,1};
		cmd_speed:{-1,0,1};
		cmd_isStop:{0,1};
	DEFINE
		--forecase_dis:=1;
		--PID:=[PID1,PID2];

		--cmd_isStop:=0;
		car_position:=can_in.car_position;
		car_angle:=can_in.car_angle;
		plan_point:=trace[1];

		dx:=(-car_position[0])+(plan_point[0]);
		dy:=(-car_position[1])+(plan_point[1]);
		control:=[cmd_speed,cmd_angle,cmd_gear,cmd_isStop];
		
	ASSIGN
		init(cmd_angle):=0;
		init(cmd_speed):=0;
		init(cmd_gear):=0;
		init(cmd_isStop):=0;
		next(cmd_gear):=
		case
			(car_angle=0)&(dx=1):1;
			(car_angle=0)&(dx=-1):-1;
			(car_angle=4)&(dx=1):-1;
			(car_angle=4)&(dx=-1):1;
			TRUE:0;
		esac;

		next(cmd_angle):=
		case
			(car_angle=0)&(dy=1):-1;
			(car_angle=0)&(dy=-1):1;
			(car_angle=4)&(dy=1):-1;
			(car_angle=4)&(dy=-1):1;
			TRUE:0;
		esac;

		next(cmd_isStop):=
		case
			plan_stop=2:1;
			TRUE:cmd_isStop;
		esac;

		--[4]can?
		next(cmd_speed):=next(cmd_gear);

MODULE comp_stop(trace,ultrasonic_info,can_in)
	VAR
		-- state flag, 0 normal, 1 speed down, 2 stop
		isStop:{0,1,2};
	DEFINE
		--the target speed;
		velo:=can_in.car_speed;
		packetStop:=[velo,isStop];
		plan_point:=trace[1];
		car_position:=trace[0];
	ASSIGN
		init(isStop):=0;
		next(isStop):=
		case
			(plan_point[1]+car_position[1]=0)&(plan_point[0]+car_position[0]=0):2;
			(ultrasonic_info=1):2;
			TRUE:isStop;
		esac;
		
MODULE runDis()

MODULE runAngle()

MODULE getCurve()

MODULE cross()

MODULE comp_foward(eye_info,can_in)
	DEFINE
		first_point:=eye_info;
		--second_point:=eye_info[1];
		trace:=[can_in.car_position,first_point];
		--[5]barrier
		--[6]cross point

MODULE comp_back(around_valuePort,can_in)
	DEFINE
		no_port:=[-1,-1];
		plan_point:=
		case
			around_valuePort[0]!=no_port:around_valuePort[0];
			around_valuePort[1]!=no_port:around_valuePort[1];
			around_valuePort[2]!=no_port:around_valuePort[2];
			TRUE:no_port;
		esac;
		
		trace:=[can_in.car_position,plan_point];

MODULE comp_ultrasonic(input)
	DEFINE
		out:=input;

MODULE comp_double(eye_signal,simulate)
	VAR
		compare_road:compare_cordinate(seen_ports[1],road,11);
		compare_cross:compare_cordinate(seen_ports[1],cross_ports,3);
		compare_road_left:compare_cordinate(seen_ports[0],road,11);
	DEFINE
		seen_ports:=eye_signal;
		cross_ports:=simulate.cross;
		road:=simulate.road;
		no_port:=[-1,-1];
		isCross:=compare_cross.out;
		isLeft:=
		case
			isCross[0]!=-1:compare_road_left.out;
			TRUE:no_port;
		esac;
		
		front:=
		case
			compare_road.out[0]!=-1:compare_road.out;
			TRUE:no_port;
		esac;
		
		front_next:=
		case
			(isCross[0]!=-1)&(isLeft[0]!=-1):isLeft;
			(isCross[0]!=-1)&(isLeft[0]=-1):seen_ports[2];
			TRUE:no_port;
		esac;
		
		out:=
		case
			front_next[0]!=-1:front_next;
			front[0]!=-1;front;
			TRUE:no_port;
		esac;
		
MODULE compare_cordinate(one,list,num)		
	VAR
		n1:decrease(num);
		n2:decrease(n1.v);
		n3:decrease(n2.v);
		n4:decrease(n3.v);
		n5:decrease(n4.v);
		n6:decrease(n5.v);
		n7:decrease(n6.v);
		n8:decrease(n7.v);
		n9:decrease(n8.v);
		n10:decrease(n9.v);
		n11:decrease(n10.v);
		n12:decrease(n11.v);
	DEFINE
		no_port:=[-1,-1];
		out:=
		case
			(num>=0)&(one[0]=list[num][0])&(one[1]=list[num][1]):one;
			(num>=1)&(one[0]=list[n1.v][0])&(one[1]=list[n1.v][1]):one;
			(num>=2)&(one[0]=list[n2.v][0])&(one[1]=list[n2.v][1]):one;
			(num>=3)&(one[0]=list[n3.v][0])&(one[1]=list[n3.v][1]):one;
			(num>=4)&(one[0]=list[n4.v][0])&(one[1]=list[n4.v][1]):one;
			(num>=5)&(one[0]=list[n5.v][0])&(one[1]=list[n5.v][1]):one;
			(num>=6)&(one[0]=list[n6.v][0])&(one[1]=list[n6.v][1]):one;
			(num>=7)&(one[0]=list[n7.v][0])&(one[1]=list[n7.v][1]):one;
			(num>=8)&(one[0]=list[n8.v][0])&(one[1]=list[n8.v][1]):one;
			(num>=9)&(one[0]=list[n9.v][0])&(one[1]=list[n9.v][1]):one;
			(num>=10)&(one[0]=list[n10.v][0])&(one[1]=list[n10.v][1]):one;
			(num>=11)&(one[0]=list[n11.v][0])&(one[1]=list[n11.v][1]):one;
			(num>=12)&(one[0]=list[n12.v][0])&(one[1]=list[n12.v][1]):one;
			TRUE:no_port;
		esac;
		
MODULE decrease(num)
	DEFINE
		v:=(num=0)?0:num+(-1);
		

MODULE comp_around(around_signal,simulate)
	VAR
		compare_value_port1:compare_cordinate(carport[0],ports,7);
		compare_value_port2:compare_cordinate(carport[1],ports,7);
		compare_value_port3:compare_cordinate(carport[2],ports,7);
	DEFINE
		--light:input[0];
		--scene:input[1];
		ports:=around_signal;
		carport:=simulate.carport;
		carport_car:=simulate.carport_car;
		out:=[valuePort1,valuePort2,valuePort3];

		--[2] integer can't be case, replace port itself?
		valuePort1:=compare_value_port1.out;
		valuePort2:=compare_value_port2.out;
		valuePort3:=compare_value_port3.out;
--===================================
--actuator
--===================================
MODULE SteerWheel(input)
	DEFINE
		out:=input;

MODULE Engine(input)
	DEFINE
		out:=input;

MODULE Brake(input)
	DEFINE
		out:=input;

MODULE Gear(input)
	DEFINE
		out:=input;

--===================================

/--
1.位置信息暂时由GPS单独处理
2.stop模块中的减速尚未使用

黑盒部分
3.trace暂时以车与目标坐标构成

4.[6]拐弯部分还没做
5.倒车模式和自动驾驶的切换未
6.需要更强大的轨迹模块，记忆多个预瞄点

!未加入道路识别，导致模型相互矛盾？？？
先以环绕行走开始
--/

/-- TODO
[1]Simulate
	represent state in define
	if module can be param?yes
[2]comp_around
	ports
[3]plan_action:around
	sensor around deal with enviroment?
[4]next=next?
[5]the path of barrier added
[6]cross point ignored
--/

/--Do to

speed or wheel speed
can_in change to module not array anymore,but later undone;

--/
/--Problem
unknown crash, seems like infinate state change over limits

--/
