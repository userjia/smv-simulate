MODULE main
  VAR
    around:comp_around();
  --LTLSPEC
    --F(around.currentState=done);
    INVARSPEC
      around.currentState=done|around.currentState!=end;

MODULE faultLib(states1,states0)
  VAR
    v:{normal,fault,unknown};

  DEFINE
	out:=
	case
		v=normal:states0;
		v=fault:states1;
		TRUE:states0;
	esac;

  ASSIGN
    init(v):=unknown;
    next(v):=
    case
      v=unknown:{fault,normal};
      TRUE:v;
    esac;

MODULE comp_around()
  VAR
    /--viewPhotos:{0,1};
    points:{1,2};
    validPoints:{1,2};
    validLines:{0,1};
    validSlots:{0,1};
    totalDetectTime:{29,30};--/

	  viewPhotos:faultLib(0,1);
    points:faultLib(1,2);
    validPoints:faultLib(1,2);
    validLines:faultLib(0,1);
    validSlots:faultLib(0,1);
    totalDetectTime:faultLib(30,29);

    currentState:{start,done,end,
			waiting,waiting_f,

			generateSurroundView,generateSurroundView_f,

			imagePathExaming,imagePathExaming_f,
			featureExtraction,featureExtraction_f,
			markingPointClassification,markingPointClassification_f,
			markingPointfinish,markingPointFinish_f,

			parkingLineCandidate,parkingLineCandidate_f,
			findPotentialLine,findPotentialLine_f,
			linePatternExaming,linePatternExaming_f,

			removeInvalidLine,removeInvalidLine_f,

			verifyParkingLine,verifyParkingLine_f,
			invalidLineDel,invalidLineDel_f,

			validSlot,validSlot_f,
			parkingSlotsInfo,parkingSlotsInfo_f};

    i:integer;

  ASSIGN
		init(currentState):=start;
		init(i):=0;
		next(i):=(currentState=end)?i:i+1;

		next(currentState):=
		case
			(currentState=start):{waiting,waiting_f};
			(currentState=waiting)&(viewPhotos.out=1):{generateSurroundView,generateSurroundView_f};--
			(currentState=generateSurroundView):{imagePathExaming,imagePathExaming_f};
			(currentState=imagePathExaming):{featureExtraction,featureExtraction_f};
			(currentState=featureExtraction):{markingPointClassification,markingPointClassification_f};
			(currentState=markingPointClassification):{markingPointfinish,markingPointFinish_f};
			(currentState=markingPointfinish)&(validPoints.out>=2):{parkingLineCandidate,parkingLineCandidate_f};--
			(currentState=parkingLineCandidate):{findPotentialLine,findPotentialLine_f};
			(currentState=findPotentialLine):{linePatternExaming,linePatternExaming_f};
			(currentState=linePatternExaming):{removeInvalidLine,removeInvalidLine_f};
			(currentState=removeInvalidLine)&(validLines.out>=1):{verifyParkingLine,verifyParkingLine_f};--
			(currentState=verifyParkingLine):{validSlot,validSlot_f};
			(currentState=validSlot):{parkingSlotsInfo,parkingSlotsInfo_f};
			(currentState=parkingSlotsInfo):done;--&(totalDetectTime.out<30)
			TRUE:end;
		esac;
